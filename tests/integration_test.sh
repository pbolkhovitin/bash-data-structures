#!/bin/bash

# integration_test.sh - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã

echo "üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –°–ò–°–¢–ï–ú–´"
echo "================================"

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
source ../lib/logger.sh
source ../lib/validator.sh
source ../lib/tester.sh

# –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–µ–∫ + –ª–æ–≥–≥–µ—Ä
test_stack_with_logging() {
    echo "üß™ –¢–µ—Å—Ç: –°—Ç–µ–∫ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
    
    source ../src/stack.sh
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤
    local temp_log="/tmp/stack_integration_test.log"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ç–µ–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    stack_api init
    stack_api push "integration_test_1"
    stack_api push "integration_test_2"
    
    local popped=$(stack_api pop)
    
    if [[ "$popped" == "integration_test_2" ]]; then
        echo "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å—Ç–µ–∫–∞ –∏ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 0
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç–µ–∫–∞"
        return 1
    fi
}

# –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö
test_multiple_structures() {
    echo "üß™ –¢–µ—Å—Ç: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö"
    
    source ../src/stack.sh
    source ../src/queue.sh
    
    # –¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å—Ç–µ–∫–æ–º –∏ –æ—á–µ—Ä–µ–¥—å—é
    stack_api init
    queue_api init
    
    stack_api push "data_from_stack"
    queue_api enqueue "data_from_queue"
    
    local stack_data=$(stack_api pop)
    local queue_data=$(queue_api dequeue)
    
    if [[ "$stack_data" == "data_from_stack" && "$queue_data" == "data_from_queue" ]]; then
        echo "‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 0
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö"
        return 1
    fi
}

# –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö
test_validation_system() {
    echo "üß™ –¢–µ—Å—Ç: –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö"
    
    local structures=("stack" "queue" "deque")
    local all_valid=true
    
    for structure in "${structures[@]}"; do
        source "../src/${structure}.sh"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—É—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        local result=$("${structure}_api" init 2>/dev/null; "${structure}_api" push "" 2>&1)
        
        if echo "$result" | grep -q "–ü—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç\|empty\|invalid"; then
            echo "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ $structure —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            echo "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –≤ $structure"
            all_valid=false
        fi
    done
    
    $all_valid
}

# –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
test_system_performance() {
    echo "üß™ –¢–µ—Å—Ç: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"
    
    source ../src/stack.sh
    source ../src/queue.sh
    
    local start_time=$(date +%s%N)
    
    # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
    stack_api init
    queue_api init
    
    for i in {1..100}; do
        stack_api push "item_$i" > /dev/null
        queue_api enqueue "item_$i" > /dev/null
    done
    
    for i in {1..100}; do
        stack_api pop > /dev/null
        queue_api dequeue > /dev/null
    done
    
    local end_time=$(date +%s%N)
    local duration=$(( (end_time - start_time) / 1000000 ))
    
    if [[ $duration -lt 5000 ]]; then
        echo "‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ: ${duration}ms"
        return 0
    else
        echo "‚ö†Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –º–µ–¥–ª–µ–Ω–Ω–∞—è: ${duration}ms"
        return 1
    fi
}

# –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ
test_error_handling() {
    echo "üß™ –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ"
    
    source ../src/stack.sh
    
    # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    local result=$(stack_api pop 2>&1)
    local exit_code=$?
    
    if [[ $exit_code -ne 0 ]] && echo "$result" | grep -q "–ø—É—Å—Ç\|empty"; then
        echo "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 0
    else
        echo "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main() {
    echo "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    
    local tests_passed=0
    local tests_total=5
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    test_stack_with_logging && ((tests_passed++))
    test_multiple_structures && ((tests_passed++))
    test_validation_system && ((tests_passed++))
    test_system_performance && ((tests_passed++))
    test_error_handling && ((tests_passed++))
    
    echo ""
    echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í:"
    echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $tests_passed/$tests_total"
    
    if [[ $tests_passed -eq $tests_total ]]; then
        echo "üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û"
        return 0
    else
        echo "‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
main "$@"