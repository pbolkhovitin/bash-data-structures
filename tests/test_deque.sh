#!/bin/bash

# test_deque.sh - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –æ—á–µ—Ä–µ–¥–∏

source ../lib/tester.sh
source ../src/deque.sh

echo "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DEQUE (–î–í–£–°–¢–û–†–û–ù–ù–Ø–Ø –û–ß–ï–†–ï–î–¨)"
echo "==========================================="

reset_test_counters

describe "–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ Deque"

it "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ deque"
deque_api init
assert_true "deque_api is_empty" "Deque –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
assert_equal "0" "$(deque_api size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0"

it "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ"
deque_api add_front "front_element"
assert_equal "false" "$(deque_api is_empty)" "Deque –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
assert_equal "1" "$(deque_api size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1"
assert_equal "front_element" "$(deque_api peek_front)" "–ü–µ—Ä–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'front_element'"

it "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü"
deque_api add_rear "rear_element"
assert_equal "2" "$(deque_api size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 2"
assert_equal "rear_element" "$(deque_api peek_rear)" "–ó–∞–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'rear_element'"
end_describe

describe "–î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"

it "–£–¥–∞–ª–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞"
deque_api init
deque_api add_front "to_remove_front"
removed=$(deque_api remove_front)
assert_equal "to_remove_front" "$removed" "–£–¥–∞–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'to_remove_front'"
assert_equal "true" "$(deque_api is_empty)" "Deque –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

it "–£–¥–∞–ª–µ–Ω–∏–µ —Å –∫–æ–Ω—Ü–∞"
deque_api init
deque_api add_rear "to_remove_rear"
removed=$(deque_api remove_rear)
assert_equal "to_remove_rear" "$removed" "–£–¥–∞–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'to_remove_rear'"
assert_equal "true" "$(deque_api is_empty)" "Deque –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

it "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ–±–æ–∏—Ö –∫–æ–Ω—Ü–æ–≤"
deque_api init
deque_api add_front "A"
deque_api add_rear "B"
deque_api add_front "C"
deque_api add_rear "D"

assert_equal "4" "$(deque_api size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 4"

front1=$(deque_api remove_front)
rear1=$(deque_api remove_rear)
front2=$(deque_api remove_front)
rear2=$(deque_api remove_rear)

assert_equal "C" "$front1" "–ü–µ—Ä–≤—ã–π remove_front –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'C'"
assert_equal "D" "$rear1" "–ü–µ—Ä–≤—ã–π remove_rear –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'D'"
assert_equal "A" "$front2" "–í—Ç–æ—Ä–æ–π remove_front –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'A'"
assert_equal "B" "$rear2" "–í—Ç–æ—Ä–æ–π remove_rear –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'B'"
end_describe

describe "–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"

it "Remove_front –∏–∑ –ø—É—Å—Ç–æ–≥–æ deque"
result=$(deque_api remove_front 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_true "echo '$result' | grep -q '–ø—É—Å—Ç'" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ deque"

it "Remove_rear –∏–∑ –ø—É—Å—Ç–æ–≥–æ deque"
result=$(deque_api remove_rear 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_true "echo '$result' | grep -q '–ø—É—Å—Ç'" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ deque"

it "Peek_front –ø—É—Å—Ç–æ–≥–æ deque"
result=$(deque_api peek_front 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_true "echo '$result' | grep -q '–ø—É—Å—Ç'" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ deque"

it "Peek_rear –ø—É—Å—Ç–æ–≥–æ deque"
result=$(deque_api peek_rear 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_true "echo '$result' | grep -q '–ø—É—Å—Ç'" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ deque"

it "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
result=$(deque_api add_front "" 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_true "echo '$result' | grep -q '–ü—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç'" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
end_describe

describe "–°–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"

it "Deque –∫–∞–∫ —Å—Ç–µ–∫ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ü–∞)"
deque_api init
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ rear –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ —Å—Ç–µ–∫
deque_api add_rear "push1"
deque_api add_rear "push2")
deque_api add_rear "push3"

pop1=$(deque_api remove_rear)
pop2=$(deque_api remove_rear)
pop3=$(deque_api remove_rear)

assert_equal "push3" "$pop1" "–ü–µ—Ä–≤—ã–π remove_rear –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'push3'"
assert_equal "push2" "$pop2" "–í—Ç–æ—Ä–æ–π remove_rear –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'push2'"
assert_equal "push1" "$pop3" "–¢—Ä–µ—Ç–∏–π remove_rear –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'push1'"

it "Deque –∫–∞–∫ –æ—á–µ—Ä–µ–¥—å (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ü–æ–≤)"
deque_api init
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –æ—á–µ—Ä–µ–¥—å: add_rear + remove_front
deque_api add_rear "enqueue1"
deque_api add_rear "enqueue2"
deque_api add_rear "enqueue3"

dequeue1=$(deque_api remove_front)
dequeue2=$(deque_api remove_front)
dequeue3=$(deque_api remove_front)

assert_equal "enqueue1" "$dequeue1" "–ü–µ—Ä–≤—ã–π remove_front –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'enqueue1'"
assert_equal "enqueue2" "$dequeue2" "–í—Ç–æ—Ä–æ–π remove_front –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'enqueue2'"
assert_equal "enqueue3" "$dequeue3" "–¢—Ä–µ—Ç–∏–π remove_front –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'enqueue3'"

it "–°–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
deque_api init
deque_api add_front "X"
deque_api add_rear "Y"
deque_api add_front "Z"

assert_equal "Z" "$(deque_api peek_front)" "Peek_front –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'Z'"
assert_equal "Y" "$(deque_api peek_rear)" "Peek_rear –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'Y'"
assert_equal "3" "$(deque_api size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3"
end_describe

describe "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Deque"

it "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
deque_api init
start_time=$(date +%s%N)

# –ß–µ—Ä–µ–¥—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ–±–æ–∏—Ö –∫–æ–Ω—Ü–æ–≤
for i in {1..250}; do
    deque_api add_front "front_$i" > /dev/null
    deque_api add_rear "rear_$i" > /dev/null
done

assert_equal "500" "$(deque_api size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 500 –ø–æ—Å–ª–µ 500 –æ–ø–µ—Ä–∞—Ü–∏–π"

# –ò–∑–≤–ª–µ–∫–∞–µ–º —Å –æ–±–æ–∏—Ö –∫–æ–Ω—Ü–æ–≤
for i in {250..1}; do
    deque_api remove_front > /dev/null
    deque_api remove_rear > /dev/null
done

end_time=$(date +%s%N)
duration=$(( (end_time - start_time) / 1000000 ))

assert_true "[[ $duration -lt 10000 ]]" "1000 –æ–ø–µ—Ä–∞—Ü–∏–π –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è < 10 —Å–µ–∫—É–Ω–¥"
assert_equal "true" "$(deque_api is_empty)" "Deque –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
end_describe

describe "–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Deque —Ç–µ—Å—Ç—ã"

it "–ü–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö"
deque_api init
deque_api add_front "A")
deque_api add_rear "B"
deque_api add_front "C"
deque_api add_rear "D"

# –û–∂–∏–¥–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫: C, A, B, D
assert_equal "C" "$(deque_api peek_front)" "Front –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å C"
assert_equal "D" "$(deque_api peek_rear)" "Rear –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å D"

deque_api remove_front  # –£–±–∏—Ä–∞–µ–º C
assert_equal "A" "$(deque_api peek_front)" "–¢–µ–ø–µ—Ä—å front –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å A"
assert_equal "D" "$(deque_api peek_rear)" "Rear –≤—Å–µ –µ—â–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å D"

deque_api remove_rear  # –£–±–∏—Ä–∞–µ–º D
assert_equal "A" "$(deque_api peek_front)" "Front –≤—Å–µ –µ—â–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å A"
assert_equal "B" "$(deque_api peek_rear)" "–¢–µ–ø–µ—Ä—å rear –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å B"
end_describe

# –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
echo ""
echo "üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø DEQUE:"
end_describe

exit $?