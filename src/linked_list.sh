#!/bin/bash

# linked_list.sh - –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–∞ Bash

source ../lib/logger.sh
source ../lib/validator.sh

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∑–ª–∞ (—ç–º—É–ª–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –º–∞—Å—Å–∏–≤—ã)
declare -a node_data=()
declare -a node_next=()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
declare -i head_index=-1
declare -i free_list=0
declare -i list_size=0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞
init_linked_list() {
    node_data=()
    node_next=()
    head_index=-1
    free_list=0
    list_size=0
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∞–ª–ª–æ—Ü–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    for ((i=0; i<100; i++)); do
        node_next[$i]=$((i + 1))
    done
    node_next[99]=-1
    
    log "INFO" "–°–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞
create_node() {
    local data="$1"
    
    if [[ $free_list -eq -1 ]]; then
        log "ERROR" "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞"
        return -1
    fi
    
    local new_node=$free_list
    free_list=${node_next[$free_list]}
    
    node_data[$new_node]="$data"
    node_next[$new_node]=-1
    
    echo $new_node
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ
list_add_first() {
    local element="$1"
    if ! validate_element "$element"; then return 1; fi
    
    local new_node=$(create_node "$element")
    if [[ $new_node -eq -1 ]]; then return 1; fi
    
    node_next[$new_node]=$head_index
    head_index=$new_node
    ((list_size++))
    
    log "DEBUG" "LIST_ADD_FIRST: '$element' (—Ä–∞–∑–º–µ—Ä: $list_size)"
    echo "$element"
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü
list_add_last() {
    local element="$1"
    if ! validate_element "$element"; then return 1; fi
    
    local new_node=$(create_node "$element")
    if [[ $new_node -eq -1 ]]; then return 1; fi
    
    if [[ $head_index -eq -1 ]]; then
        head_index=$new_node
    else
        local current=$head_index
        while [[ ${node_next[$current]} -ne -1 ]]; do
            current=${node_next[$current]}
        done
        node_next[$current]=$new_node
    fi
    ((list_size++))
    
    log "DEBUG" "LIST_ADD_LAST: '$element' (—Ä–∞–∑–º–µ—Ä: $list_size)"
    echo "$element"
}

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
list_remove_first() {
    if [[ $head_index -eq -1 ]]; then
        echo "–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç" >&2
        return 1
    fi
    
    local element="${node_data[$head_index]}"
    local old_head=$head_index
    head_index=${node_next[$head_index]}
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∑–µ–ª –≤ free list
    node_next[$old_head]=$free_list
    free_list=$old_head
    ((list_size--))
    
    log "DEBUG" "LIST_REMOVE_FIRST: '$element' (—Ä–∞–∑–º–µ—Ä: $list_size)"
    echo "$element"
}

# –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
list_contains() {
    local element="$1"
    local current=$head_index
    local index=0
    
    while [[ $current -ne -1 ]]; do
        if [[ "${node_data[$current]}" == "$element" ]]; then
            echo $index
            return 0
        fi
        current=${node_next[$current]}
        ((index++))
    done
    
    echo "-1"
    return 1
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
list_get() {
    local index="$1"
    
    if ! [[ "$index" =~ ^[0-9]+$ ]]; then
        echo "–û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º" >&2
        return 1
    fi
    
    if [[ $index -lt 0 || $index -ge $list_size ]]; then
        echo "–û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å $index –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0-$((list_size-1))]" >&2
        return 1
    fi
    
    local current=$head_index
    for ((i=0; i<index; i++)); do
        current=${node_next[$current]}
    done
    
    echo "${node_data[$current]}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ—Ç—ã
list_is_empty() {
    [[ $head_index -eq -1 ]]
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
list_size() {
    echo "$list_size"
}

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
list_display() {
    if [[ $head_index -eq -1 ]]; then
        echo "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
        return
    fi
    
    echo "–°–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫:"
    local current=$head_index
    local index=0
    while [[ $current -ne -1 ]]; do
        echo "  [$index] ${node_data[$current]}"
        current=${node_next[$current]}
        ((index++))
    done
}

# API —Ñ—É–Ω–∫—Ü–∏—è
linked_list_api() {
    local command="$1"
    shift
    
    case "$command" in
        "init") init_linked_list >/dev/null ;;
        "add_first") list_add_first "$1" >/dev/null ;;
        "add_last") list_add_last "$1" >/dev/null ;;
        "remove_first") list_remove_first ;;
        "contains") list_contains "$1" ;;
        "get") list_get "$1" ;;
        "size") list_size ;;
        "is_empty") list_is_empty && echo "true" || echo "false" ;;
        "display") list_display ;;
        *) echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ linked_list: $command" >&2; return 1 ;;
    esac
}

# –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "üéØ –°–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫"
    echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: source linked_list.sh && linked_list_api [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä:"
    echo "  linked_list_api add_first '–ø–µ—Ä–≤—ã–π'"
    echo "  linked_list_api add_last '–ø–æ—Å–ª–µ–¥–Ω–∏–π'"
    echo "  linked_list_api display"
fi