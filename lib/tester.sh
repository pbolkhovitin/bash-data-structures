#!/bin/bash

# tester.sh - –§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Bash Data Structures
# –ü—Ä–æ—Å—Ç–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è bash-—Å–∫—Ä–∏–ø—Ç–æ–≤

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
TEST_PASSED=0
TEST_FAILED=0
TEST_SKIPPED=0
CURRENT_TEST_GROUP=""
CURRENT_TEST_NAME=""
TEST_INDENT_LEVEL=0
ASSERTION_COUNT=0

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'
DIM='\033[2m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚Ñπ ${NC}$1"
}

log_success() {
    echo -e "${GREEN}‚úì ${NC}$1"
}

log_warning() {
    echo -e "${YELLOW}‚ö† ${NC}$1"
}

log_error() {
    echo -e "${RED}‚úó ${NC}$1" >&2
}

log_debug() {
    if [[ "${TEST_DEBUG:-false}" == "true" ]]; then
        echo -e "${DIM}üêõ ${NC}$1"
    fi
}

# –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
describe() {
    CURRENT_TEST_GROUP="$1"
    TEST_INDENT_LEVEL=0
    ASSERTION_COUNT=0
    
    echo -e "\n${BOLD}${CYAN}üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: $CURRENT_TEST_GROUP${NC}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
}

# –ù–∞—á–∞–ª–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
it() {
    CURRENT_TEST_NAME="$1"
    TEST_INDENT_LEVEL=1
    ASSERTION_COUNT=0
    
    echo -ne "${DIM}  ‚Ä¢ ${CURRENT_TEST_NAME}...${NC} "
}

# –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
end_describe() {
    local total_tests=$((TEST_PASSED + TEST_FAILED + TEST_SKIPPED))
    local passed_percent=0
    
    if [[ $total_tests -gt 0 ]]; then
        passed_percent=$((TEST_PASSED * 100 / total_tests))
    fi
    
    echo -e "\n${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${BOLD}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–†–£–ü–ü–´:${NC}"
    echo -e "  ${GREEN}‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $TEST_PASSED${NC}"
    echo -e "  ${RED}‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: $TEST_FAILED${NC}"
    
    if [[ $TEST_SKIPPED -gt 0 ]]; then
        echo -e "  ${YELLOW}‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ: $TEST_SKIPPED${NC}"
    fi
    
    echo -e "  ${BOLD}üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${passed_percent}%${NC}"
    
    if [[ $TEST_FAILED -eq 0 ]]; then
        echo -e "\n${BOLD}${GREEN}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
        return 0
    else
        echo -e "\n${BOLD}${RED}üí• –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö${NC}"
        return 1
    fi
}

# Assert —Ñ—É–Ω–∫—Ü–∏–∏

assert_equal() {
    local expected="$1"
    local actual="$2"
    local message="${3:-}"
    ((ASSERTION_COUNT++))
    
    if [[ "$expected" == "$actual" ]]; then
        echo -ne "${GREEN}‚úÖ${NC} "
        ((TEST_PASSED++))
        log_debug "ASSERT_EQUAL: –û–∂–∏–¥–∞–ª–æ—Å—å '$expected', –ü–æ–ª—É—á–µ–Ω–æ '$actual' - –ü–†–û–ô–î–ï–ù–û"
        return 0
    else
        echo -ne "${RED}‚ùå${NC} "
        ((TEST_FAILED++))
        echo -e "\n${RED}    –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${CURRENT_TEST_NAME}${NC}"
        echo -e "    ${DIM}–û–∂–∏–¥–∞–ª–æ—Å—å: '$expected'${NC}"
        echo -e "    ${DIM}–ü–æ–ª—É—á–µ–Ω–æ:  '$actual'${NC}"
        if [[ -n "$message" ]]; then
            echo -e "    ${DIM}–°–æ–æ–±—â–µ–Ω–∏–µ: $message${NC}"
        fi
        echo -e "    ${DIM}–ì—Ä—É–ø–ø–∞: $CURRENT_TEST_GROUP${NC}"
        return 1
    fi
}

assert_not_equal() {
    local unexpected="$1"
    local actual="$2"
    local message="${3:-}"
    ((ASSERTION_COUNT++))
    
    if [[ "$unexpected" != "$actual" ]]; then
        echo -ne "${GREEN}‚úÖ${NC} "
        ((TEST_PASSED++))
        log_debug "ASSERT_NOT_EQUAL: –ù–µ –æ–∂–∏–¥–∞–ª–æ—Å—å '$unexpected', –ü–æ–ª—É—á–µ–Ω–æ '$actual' - –ü–†–û–ô–î–ï–ù–û"
        return 0
    else
        echo -ne "${RED}‚ùå${NC} "
        ((TEST_FAILED++))
        echo -e "\n${RED}    –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${CURRENT_TEST_NAME}${NC}"
        echo -e "    ${DIM}–ù–µ –æ–∂–∏–¥–∞–ª–æ—Å—å: '$unexpected'${NC}"
        echo -e "    ${DIM}–ü–æ–ª—É—á–µ–Ω–æ:     '$actual'${NC}"
        if [[ -n "$message" ]]; then
            echo -e "    ${DIM}–°–æ–æ–±—â–µ–Ω–∏–µ: $message${NC}"
        fi
        return 1
    fi
}

assert_true() {
    local condition="$1"
    local message="${2:-}"
    ((ASSERTION_COUNT++))
    
    if $condition; then
        echo -ne "${GREEN}‚úÖ${NC} "
        ((TEST_PASSED++))
        log_debug "ASSERT_TRUE: –£—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ - –ü–†–û–ô–î–ï–ù–û"
        return 0
    else
        echo -ne "${RED}‚ùå${NC} "
        ((TEST_FAILED++))
        echo -e "\n${RED}    –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${CURRENT_TEST_NAME}${NC}"
        echo -e "    ${DIM}–£—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ: $condition${NC}"
        if [[ -n "$message" ]]; then
            echo -e "    ${DIM}–°–æ–æ–±—â–µ–Ω–∏–µ: $message${NC}"
        fi
        return 1
    fi
}

assert_false() {
    local condition="$1"
    local message="${2:-}"
    ((ASSERTION_COUNT++))
    
    if ! $condition; then
        echo -ne "${GREEN}‚úÖ${NC} "
        ((TEST_PASSED++))
        log_debug "ASSERT_FALSE: –£—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ - –ü–†–û–ô–î–ï–ù–û"
        return 0
    else
        echo -ne "${RED}‚ùå${NC} "
        ((TEST_FAILED++))
        echo -e "\n${RED}    –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${CURRENT_TEST_NAME}${NC}"
        echo -e "    ${DIM}–£—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ (–æ–∂–∏–¥–∞–ª–æ—Å—å –ª–æ–∂—å): $condition${NC}"
        if [[ -n "$message" ]]; then
            echo -e "    ${DIM}–°–æ–æ–±—â–µ–Ω–∏–µ: $message${NC}"
        fi
        return 1
    fi
}

assert_success() {
    local command="$1"
    local message="${2:-}"
    ((ASSERTION_COUNT++))
    
    if eval "$command" >/dev/null 2>&1; then
        echo -ne "${GREEN}‚úÖ${NC} "
        ((TEST_PASSED++))
        log_debug "ASSERT_SUCCESS: –ö–æ–º–∞–Ω–¥–∞ '$command' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ - –ü–†–û–ô–î–ï–ù–û"
        return 0
    else
        echo -ne "${RED}‚ùå${NC} "
        ((TEST_FAILED++))
        echo -e "\n${RED}    –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${CURRENT_TEST_NAME}${NC}"
        echo -e "    ${DIM}–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: $command${NC}"
        if [[ -n "$message" ]]; then
            echo -e "    ${DIM}–°–æ–æ–±—â–µ–Ω–∏–µ: $message${NC}"
        fi
        return 1
    fi
}

assert_failure() {
    local command="$1"
    local message="${2:-}"
    ((ASSERTION_COUNT++))
    
    if ! eval "$command" >/dev/null 2>&1; then
        echo -ne "${GREEN}‚úÖ${NC} "
        ((TEST_PASSED++))
        log_debug "ASSERT_FAILURE: –ö–æ–º–∞–Ω–¥–∞ '$command' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å) - –ü–†–û–ô–î–ï–ù–û"
        return 0
    else
        echo -ne "${RED}‚ùå${NC} "
        ((TEST_FAILED++))
        echo -e "\n${RED}    –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${CURRENT_TEST_NAME}${NC}"
        echo -e "    ${DIM}–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ (–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞): $command${NC}"
        if [[ -n "$message" ]]; then
            echo -e "    ${DIM}–°–æ–æ–±—â–µ–Ω–∏–µ: $message${NC}"
        fi
        return 1
    fi
}

assert_contains() {
    local container="$1"
    local content="$2"
    local message="${3:-}"
    ((ASSERTION_COUNT++))
    
    if [[ "$container" == *"$content"* ]]; then
        echo -ne "${GREEN}‚úÖ${NC} "
        ((TEST_PASSED++))
        log_debug "ASSERT_CONTAINS: '$container' —Å–æ–¥–µ—Ä–∂–∏—Ç '$content' - –ü–†–û–ô–î–ï–ù–û"
        return 0
    else
        echo -ne "${RED}‚ùå${NC} "
        ((TEST_FAILED++))
        echo -e "\n${RED}    –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${CURRENT_TEST_NAME}${NC}"
        echo -e "    ${DIM}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: '$container'${NC}"
        echo -e "    ${DIM}–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç: '$content'${NC}"
        if [[ -n "$message" ]]; then
            echo -e "    ${DIM}–°–æ–æ–±—â–µ–Ω–∏–µ: $message${NC}"
        fi
        return 1
    fi
}

assert_not_contains() {
    local container="$1"
    local content="$2"
    local message="${3:-}"
    ((ASSERTION_COUNT++))
    
    if [[ "$container" != *"$content"* ]]; then
        echo -ne "${GREEN}‚úÖ${NC} "
        ((TEST_PASSED++))
        log_debug "ASSERT_NOT_CONTAINS: '$container' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '$content' - –ü–†–û–ô–î–ï–ù–û"
        return 0
    else
        echo -ne "${RED}‚ùå${NC} "
        ((TEST_FAILED++))
        echo -e "\n${RED}    –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${CURRENT_TEST_NAME}${NC}"
        echo -e "    ${DIM}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: '$container'${NC}"
        echo -e "    ${DIM}–°–æ–¥–µ—Ä–∂–∏—Ç (–Ω–µ –æ–∂–∏–¥–∞–ª–æ—Å—å): '$content'${NC}"
        if [[ -n "$message" ]]; then
            echo -e "    ${DIM}–°–æ–æ–±—â–µ–Ω–∏–µ: $message${NC}"
        fi
        return 1
    fi
}

assert_empty() {
    local value="$1"
    local message="${2:-}"
    ((ASSERTION_COUNT++))
    
    if [[ -z "$value" ]]; then
        echo -ne "${GREEN}‚úÖ${NC} "
        ((TEST_PASSED++))
        log_debug "ASSERT_EMPTY: –ó–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ - –ü–†–û–ô–î–ï–ù–û"
        return 0
    else
        echo -ne "${RED}‚ùå${NC} "
        ((TEST_FAILED++))
        echo -e "\n${RED}    –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${CURRENT_TEST_NAME}${NC}"
        echo -e "    ${DIM}–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ: '$value'${NC}"
        if [[ -n "$message" ]]; then
            echo -e "    ${DIM}–°–æ–æ–±—â–µ–Ω–∏–µ: $message${NC}"
        fi
        return 1
    fi
}

assert_not_empty() {
    local value="$1"
    local message="${2:-}"
    ((ASSERTION_COUNT++))
    
    if [[ -n "$value" ]]; then
        echo -ne "${GREEN}‚úÖ${NC} "
        ((TEST_PASSED++))
        log_debug "ASSERT_NOT_EMPTY: –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ - –ü–†–û–ô–î–ï–ù–û"
        return 0
    else
        echo -ne "${RED}‚ùå${NC} "
        ((TEST_FAILED++))
        echo -e "\n${RED}    –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${CURRENT_TEST_NAME}${NC}"
        echo -e "    ${DIM}–ó–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ (–æ–∂–∏–¥–∞–ª–æ—Å—å –Ω–µ –ø—É—Å—Ç–æ–µ)${NC}"
        if [[ -n "$message" ]]; then
            echo -e "    ${DIM}–°–æ–æ–±—â–µ–Ω–∏–µ: $message${NC}"
        fi
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
skip() {
    local reason="${1:-–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã}"
    ((TEST_SKIPPED++))
    echo -ne "${YELLOW}‚è≠${NC} "
    echo -e "${DIM}(–ü—Ä–æ–ø—É—â–µ–Ω–æ: $reason)${NC}"
}

skip_if() {
    local condition="$1"
    local reason="${2:-—É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ}"
    
    if $condition; then
        skip "$reason"
        return 0
    fi
    return 1
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏
run_test() {
    local test_function="$1"
    local test_name="$2"
    
    it "$test_name"
    if $test_function; then
        echo -e "${GREEN}–ü–†–û–ô–î–ï–ù${NC}"
    else
        echo -e "${RED}–ù–ï –ü–†–û–ô–î–ï–ù${NC}"
    fi
}

setup() {
    log_debug "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º: $CURRENT_TEST_NAME"
    # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
}

teardown() {
    log_debug "–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞: $CURRENT_TEST_NAME"
    # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
run_with_timeout() {
    local timeout_seconds="$1"
    local command="${*:2}"
    
    timeout "$timeout_seconds" bash -c "$command" 2>/dev/null
    local result=$?
    
    if [[ $result -eq 124 ]]; then
        log_error "–¢–ï–°–¢ –ü–†–ï–†–í–ê–ù: –ø—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç ${timeout_seconds}—Å"
        return 1
    elif [[ $result -eq 0 ]]; then
        return 0
    else
        return $result
    fi
}

# –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ç–µ—Å—Ç–æ–≤
reset_test_counters() {
    TEST_PASSED=0
    TEST_FAILED=0
    TEST_SKIPPED=0
    CURRENT_TEST_GROUP=""
    CURRENT_TEST_NAME=""
    ASSERTION_COUNT=0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏—Ç–æ–≥–æ–≤ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
print_test_summary() {
    local total_tests=$((TEST_PASSED + TEST_FAILED + TEST_SKIPPED))
    local passed_percent=0
    
    if [[ $total_tests -gt 0 ]]; then
        passed_percent=$((TEST_PASSED * 100 / total_tests))
    fi
    
    echo -e "\n${BOLD}${PURPLE}üéØ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø${NC}"
    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "  ${GREEN}‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $TEST_PASSED${NC}"
    echo -e "  ${RED}‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: $TEST_FAILED${NC}"
    
    if [[ $TEST_SKIPPED -gt 0 ]]; then
        echo -e "  ${YELLOW}‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ: $TEST_SKIPPED${NC}"
    fi
    
    echo -e "  ${BOLD}üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${passed_percent}%${NC}"
    echo -e "  ${BOLD}üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total_tests${NC}"
    
    if [[ $TEST_FAILED -eq 0 && $TEST_PASSED -gt 0 ]]; then
        echo -e "\n${BOLD}${GREEN}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!${NC}"
        return 0
    elif [[ $TEST_FAILED -gt 0 ]]; then
        echo -e "\n${BOLD}${RED}üí• –ù–ê–ô–î–ï–ù–´ –û–®–ò–ë–ö–ò –í –¢–ï–°–¢–ê–•${NC}"
        return 1
    else
        echo -e "\n${BOLD}${YELLOW}‚Ñπ –ù–ï–¢ –ó–ê–ü–£–©–ï–ù–ù–´–• –¢–ï–°–¢–û–í${NC}"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
create_temp_file() {
    local prefix="${1:-test}"
    mktemp "/tmp/${prefix}_XXXXXX"
}

create_temp_dir() {
    local prefix="${1:-test}"
    mktemp -d "/tmp/${prefix}_XXXXXX"
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
validate_test_environment() {
    local errors=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥
    local required_commands="bash date echo printf"
    for cmd in $required_commands; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            log_error "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $cmd"
            ((errors++))
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ bash
    if [[ ${BASH_VERSINFO[0]} -lt 4 ]]; then
        log_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Bash 4.0+ (—Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${BASH_VERSION})"
    fi
    
    return $errors
}

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
demo_test_framework() {
    echo -e "${BOLD}${CYAN}–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –§–†–ï–ô–ú–í–û–†–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø${NC}"
    
    describe "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö assert —Ñ—É–Ω–∫—Ü–∏–π"
    
    it "assert_equal - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
    assert_equal "hello" "hello" "–°—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–≤–Ω—ã"
    
    it "assert_not_equal - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
    assert_not_equal "hello" "world" "–°—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è"
    
    it "assert_true - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è"
    assert_true "[[ 1 -eq 1 ]]" "1 –¥–æ–ª–∂–Ω–æ —Ä–∞–≤–Ω—è—Ç—å—Å—è 1"
    
    it "assert_false - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∂–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è"
    assert_false "[[ 1 -eq 2 ]]" "1 –Ω–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–≤–Ω—è—Ç—å—Å—è 2"
    
    it "assert_contains - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏"
    assert_contains "hello world" "world" "–î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'world'"
    
    it "assert_success - —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
    assert_success "true" "–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ"
    
    end_describe
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
init_test_framework() {
    log_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    validate_test_environment
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    export TEST_TEMP_DIR=$(create_temp_dir "test_framework")
    log_debug "–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $TEST_TEMP_DIR"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    trap 'cleanup_test_framework' EXIT
}

# –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
cleanup_test_framework() {
    if [[ -n "$TEST_TEMP_DIR" && -d "$TEST_TEMP_DIR" ]]; then
        log_debug "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $TEST_TEMP_DIR"
        rm -rf "$TEST_TEMP_DIR"
    fi
}

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
export -f describe it end_describe
export -f assert_equal assert_not_equal assert_true assert_false
export -f assert_success assert_failure assert_contains assert_not_contains
export -f assert_empty assert_not_empty
export -f skip skip_if run_test
export -f setup teardown run_with_timeout
export -f reset_test_counters print_test_summary
export -f create_temp_file create_temp_dir
export -f log_info log_success log_warning log_error log_debug

# –ê–≤—Ç–æ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if [[ "${TEST_AUTO_INIT:-true}" == "true" ]]; then
    init_test_framework
fi

# –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é - –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo -e "${BOLD}Bash Data Structures - Test Framework${NC}"
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: source tester.sh"
    echo ""
    echo "–§—É–Ω–∫—Ü–∏–∏:"
    echo "  describe 'group' - –Ω–∞—á–∞—Ç—å –≥—Ä—É–ø–ø—É —Ç–µ—Å—Ç–æ–≤"
    echo "  it 'test'       - –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç"
    echo "  assert_*        - —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    echo "  end_describe    - –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥—Ä—É–ø–ø—É"
    echo ""
    demo_test_framework
fi