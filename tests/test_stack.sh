#!/bin/bash

# test_stack.sh - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–µ–∫–∞

source ../lib/tester.sh
source ../src/stack.sh

echo "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ï–ö–ê (LIFO)"
echo "==========================="

reset_test_counters

describe "–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ç–µ–∫–∞"

it "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞"
stack_api init
assert_true "stack_api is_empty" "–°—Ç–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
assert_equal "0" "$(stack_api size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0"

it "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
stack_api push "test_element"
assert_equal "false" "$(stack_api is_empty)" "–°—Ç–µ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
assert_equal "1" "$(stack_api size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1"
assert_equal "test_element" "$(stack_api peek)" "–í–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'test_element'"

it "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞"
popped=$(stack_api pop)
assert_equal "test_element" "$popped" "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'test_element'"
assert_equal "true" "$(stack_api is_empty)" "–°—Ç–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"
end_describe

describe "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—è–¥–∫–∞ LIFO (Last-In-First-Out)"

it "–ü–æ—Ä—è–¥–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç LIFO"
stack_api push "first"
stack_api push "second" 
stack_api push "third"

pop1=$(stack_api pop)
pop2=$(stack_api pop)
pop3=$(stack_api pop)

assert_equal "third" "$pop1" "–ü–µ—Ä–≤—ã–π pop –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 'third' (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π)"
assert_equal "second" "$pop2" "–í—Ç–æ—Ä–æ–π pop –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 'second'"
assert_equal "first" "$pop3" "–¢—Ä–µ—Ç–∏–π pop –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 'first' (–ø–µ—Ä–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π)"
assert_equal "true" "$(stack_api is_empty)" "–°—Ç–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
end_describe

describe "–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"

it "Pop –∏–∑ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞"
result=$(stack_api pop 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_true "echo '$result' | grep -q '–ø—É—Å—Ç'" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞"

it "Peek –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞"
result=$(stack_api peek 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_true "echo '$result' | grep -q '–ø—É—Å—Ç'" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞"

it "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
result=$(stack_api push "" 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_true "echo '$result' | grep -q '–ü—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç'" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
end_describe

describe "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–µ–∫–∞"

it "–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
stack_api push "apple"
stack_api push "banana"
stack_api push "cherry"

index=$(stack_api contains "banana")
assert_equal "1" "$index" "–ò–Ω–¥–µ–∫—Å 'banana' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1"

it "–ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
not_found=$(stack_api contains "orange")
assert_equal "-1" "$not_found" "–ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å -1"

it "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç–µ–∫–∞"
stack_api init
stack_api push "element1"
stack_api push "element2"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ display –Ω–µ –ø–∞–¥–∞–µ—Ç –∏ —á—Ç–æ-—Ç–æ –≤—ã–≤–æ–¥–∏—Ç
output=$(stack_api display)
assert_equal "0" "$?" "Display –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ"
assert_true "[[ -n '$output' ]]" "Display –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"

it "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ push/pop"
stack_api init
for i in {1..100}; do
    stack_api push "item_$i" > /dev/null
done
assert_equal "100" "$(stack_api size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100 –ø–æ—Å–ª–µ 100 push"

for i in {100..1}; do
    popped=$(stack_api pop)
    assert_equal "item_$i" "$popped" "Pop –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å item_$i"
done
assert_equal "true" "$(stack_api is_empty)" "–°—Ç–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö pop"
end_describe

describe "–°–º–µ—à–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"

it "–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ push –∏ pop"
stack_api init
stack_api push "A"
stack_api push "B"
pop1=$(stack_api pop)
stack_api push "C"
stack_api push "D"
pop2=$(stack_api pop)
pop3=$(stack_api pop)
pop4=$(stack_api pop)

assert_equal "B" "$pop1" "–ü–µ—Ä–≤—ã–π pop –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å B"
assert_equal "D" "$pop2" "–í—Ç–æ—Ä–æ–π pop –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å D" 
assert_equal "C" "$pop3" "–¢—Ä–µ—Ç–∏–π pop –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å C"
assert_equal "A" "$pop4" "–ß–µ—Ç–≤–µ—Ä—Ç—ã–π pop –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å A"
end_describe

# –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
echo ""
echo "üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–¢–ï–ö–ê:"
end_describe

exit $?