#!/bin/bash

# test_stack.sh - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–µ–∫–∞
# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞ bash-data-structures

source ../lib/tester.sh
source ../src/stack.sh

echo "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ï–ö–ê (LIFO)"
echo "==========================="

reset_test_counters

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_DATA=("apple" "banana" "cherry" "date" "elderberry")

describe "–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ç–µ–∫–∞"

it "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞"
stack::init
assert_true "stack::is_initialized" "–°—Ç–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
assert_true "stack::is_empty" "–°—Ç–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
assert_equal "0" "$(stack::size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0"

it "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
stack::push "test_element"
assert_equal "false" "$(stack::is_empty)" "–°—Ç–µ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
assert_equal "1" "$(stack::size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1"
assert_equal "test_element" "$(stack::peek)" "–í–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'test_element'"

it "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞"
popped=$(stack::pop)
assert_equal "test_element" "$popped" "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'test_element'"
assert_equal "true" "$(stack::is_empty)" "–°—Ç–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"
end_describe

describe "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—è–¥–∫–∞ LIFO (Last-In-First-Out)"

it "–ü–æ—Ä—è–¥–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç LIFO"
stack::push "first"
stack::push "second" 
stack::push "third"

pop1=$(stack::pop)
pop2=$(stack::pop)
pop3=$(stack::pop)

assert_equal "third" "$pop1" "–ü–µ—Ä–≤—ã–π pop –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 'third' (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π)"
assert_equal "second" "$pop2" "–í—Ç–æ—Ä–æ–π pop –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 'second'"
assert_equal "first" "$pop3" "–¢—Ä–µ—Ç–∏–π pop –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 'first' (–ø–µ—Ä–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π)"
assert_equal "true" "$(stack::is_empty)" "–°—Ç–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
end_describe

describe "–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"

it "Pop –∏–∑ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞"
result=$(stack::pop 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_contains "$result" "empty" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞"

it "Peek –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞"
result=$(stack::peek 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_contains "$result" "empty" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞"

it "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
result=$(stack::push "" 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_contains "$result" "empty" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"

it "–û–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
stack::destroy
result=$(stack::push "test" 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_contains "$result" "initialized" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
stack::init
end_describe

describe "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–µ–∫–∞"

it "–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
stack::push "apple"
stack::push "banana"
stack::push "cherry"

index=$(stack::contains "banana")
assert_equal "1" "$index" "–ò–Ω–¥–µ–∫—Å 'banana' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1"

it "–ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
not_found=$(stack::contains "orange")
assert_equal "-1" "$not_found" "–ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å -1"

it "–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"
stack::clear
stack::push "first"
stack::push "second"
stack::push "third"

assert_equal "first" "$(stack::get 0)" "–ò–Ω–¥–µ–∫—Å 0 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'first'"
assert_equal "second" "$(stack::get 1)" "–ò–Ω–¥–µ–∫—Å 1 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'second'"
assert_equal "third" "$(stack::get 2)" "–ò–Ω–¥–µ–∫—Å 2 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'third'"

it "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"
result=$(stack::get 10 2>&1)
exit_code=$?
assert_equal "1" "$exit_code" "–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ"
assert_contains "$result" "out of bounds" "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã"

it "–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"
stack::clear
stack::push "A"
stack::push "B" 
stack::push "C"

removed=$(stack::remove 1)
assert_equal "B" "$removed" "–£–¥–∞–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'B'"
assert_equal "2" "$(stack::size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å—Å—è –¥–æ 2"
assert_equal "C" "$(stack::pop)" "–°–ª–µ–¥—É—é—â–∏–π pop –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'C'"
assert_equal "A" "$(stack::pop)" "–ü–æ—Å–ª–µ–¥–Ω–∏–π pop –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'A'"
end_describe

describe "–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"

it "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤"
stack::clear
stack::push "one"
stack::push "two"

array_output=$(stack::to_array)
assert_contains "$array_output" "one" "–ú–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'one'"
assert_contains "$array_output" "two" "–ú–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'two'"
assert_equal "2" "$(echo "$array_output" | wc -l)" "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —Å—Ç—Ä–æ–∫–∏ –≤ –≤—ã–≤–æ–¥–µ"

it "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON"
stack::clear
stack::push "test_data"

json_output=$(stack::to_json)
assert_contains "$json_output" '"type": "stack"' "JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–∏–ø stack"
assert_contains "$json_output" '"data": ["test_data"]' "JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
assert_success "echo '$json_output' | python3 -m json.tool >/dev/null 2>&1" "JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"

it "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞"
stack::clear
stack::from_array "item1" "item2" "item3"
assert_equal "3" "$(stack::size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3 –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏"
assert_equal "item3" "$(stack::pop)" "–ü–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è"
assert_equal "item2" "$(stack::pop)"
assert_equal "item1" "$(stack::pop)"

it "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç–µ–∫–∞"
stack::clear
stack::push "element1"
stack::push "element2"

output=$(stack::display)
assert_equal "0" "$?" "Display –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ"
assert_contains "$output" "element1" "Display –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å element1"
assert_contains "$output" "element2" "Display –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å element2"
end_describe

describe "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"

it "–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
stack::clear
local count=1000

for ((i=1; i<=count; i++)); do
    stack::push "item_$i" > /dev/null
done

assert_equal "$count" "$(stack::size)" "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å $count"

for ((i=count; i>=1; i--)); do
    popped=$(stack::pop)
    assert_equal "item_$i" "$popped" "Pop –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å item_$i"
done

assert_equal "true" "$(stack::is_empty)" "–°—Ç–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö pop"
end_describe

describe "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å API"

it "–†–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ stack::api"
stack::init
stack::api push "api_test"
assert_equal "1" "$(stack::api size)" "API size –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
assert_equal "api_test" "$(stack::api peek)" "API peek –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
assert_equal "api_test" "$(stack::api pop)" "API pop –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
stack::destroy
end_describe

# –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
stack::destroy 2>/dev/null || true

# –ò—Ç–æ–≥–∏
echo ""
print_test_summary

exit $?