#!/bin/bash

# logger.sh - –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Bash Data Structures

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
DEFAULT_LOG_DIR="/tmp/bash-ds-logs"
SYSTEM_LOG_DIR="/var/log/bash-ds"

# –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
if [[ -w "$SYSTEM_LOG_DIR" ]] || mkdir -p "$SYSTEM_LOG_DIR" 2>/dev/null; then
    readonly LOG_DIR="${LOG_DIR:-$SYSTEM_LOG_DIR}"
else
    readonly LOG_DIR="${LOG_DIR:-$DEFAULT_LOG_DIR}"
    mkdir -p "$LOG_DIR" 2>/dev/null || {
        echo "Warning: Cannot create log directory $LOG_DIR" >&2
    }
fi

readonly MAX_LOG_SIZE=${MAX_LOG_SIZE:-1048576}  # 1MB
readonly MAX_LOG_FILES=${MAX_LOG_FILES:-5}

# –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
readonly LOG_LEVEL_DEBUG=0
readonly LOG_LEVEL_INFO=1
readonly LOG_LEVEL_WARNING=2
readonly LOG_LEVEL_ERROR=3

# –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO)
CURRENT_LOG_LEVEL=${LOG_LEVEL:-$LOG_LEVEL_INFO}

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger::init() {
    local component="${1:-general}"
    local log_level="${2:-$CURRENT_LOG_LEVEL}"
    
    CURRENT_LOG_LEVEL=$log_level
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [[ ! -d "$LOG_DIR" ]]; then
        mkdir -p "$LOG_DIR" 2>/dev/null || {
            echo "Warning: Cannot create log directory $LOG_DIR" >&2
            return 1
        }
    fi
    
    export LOG_FILE="$LOG_DIR/${component}.log"
    logger::info "Logger initialized for component: $component (level: $log_level)"
    return 0
}

# –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤
logger::rotate() {
    local log_file="${1:-$LOG_FILE}"
    
    if [[ ! -f "$log_file" ]]; then
        return 0
    fi
    
    local file_size=$(stat -c%s "$log_file" 2>/dev/null || stat -f%z "$log_file" 2>/dev/null)
    
    if [[ $file_size -gt $MAX_LOG_SIZE ]]; then
        local timestamp=$(date '+%Y%m%d_%H%M%S')
        local rotated_file="${log_file}.${timestamp}"
        
        mv "$log_file" "$rotated_file" 2>/dev/null
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
        find "$(dirname "$log_file")" -name "$(basename "$log_file").*" -type f \
             -mtime +$MAX_LOG_FILES -delete 2>/dev/null
    fi
}

# –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger::log() {
    local level="$1"
    local message="$2"
    local component="${3:-${COMPONENT:-unknown}}"
    
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local log_entry="[$timestamp] [$component] [$level] $message"
    
    # –†–æ—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
    logger::rotate
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    if [[ -n "$LOG_FILE" && -w "$(dirname "$LOG_FILE")" ]]; then
        echo "$log_entry" >> "$LOG_FILE"
    fi
    
    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    case "$level" in
        "DEBUG")
            if [[ $CURRENT_LOG_LEVEL -le $LOG_LEVEL_DEBUG ]]; then
                echo -e "${BLUE}üêõ $log_entry${NC}" >&2
            fi
            ;;
        "INFO")
            if [[ $CURRENT_LOG_LEVEL -le $LOG_LEVEL_INFO ]]; then
                echo -e "${GREEN}‚Ñπ $log_entry${NC}" >&2
            fi
            ;;
        "WARNING")
            if [[ $CURRENT_LOG_LEVEL -le $LOG_LEVEL_WARNING ]]; then
                echo -e "${YELLOW}‚ö† $log_entry${NC}" >&2
            fi
            ;;
        "ERROR")
            if [[ $CURRENT_LOG_LEVEL -le $LOG_LEVEL_ERROR ]]; then
                echo -e "${RED}‚úó $log_entry${NC}" >&2
            fi
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger::debug() {
    logger::log "DEBUG" "$1" "$2"
}

logger::info() {
    logger::log "INFO" "$1" "$2"
}

logger::warning() {
    logger::log "WARNING" "$1" "$2"
}

logger::error() {
    logger::log "ERROR" "$1" "$2"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger::set_level() {
    case "$1" in
        "DEBUG") CURRENT_LOG_LEVEL=$LOG_LEVEL_DEBUG ;;
        "INFO") CURRENT_LOG_LEVEL=$LOG_LEVEL_INFO ;;
        "WARNING") CURRENT_LOG_LEVEL=$LOG_LEVEL_WARNING ;;
        "ERROR") CURRENT_LOG_LEVEL=$LOG_LEVEL_ERROR ;;
        *) logger::error "Unknown log level: $1" ;;
    esac
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger::get_level() {
    case "$CURRENT_LOG_LEVEL" in
        $LOG_LEVEL_DEBUG) echo "DEBUG" ;;
        $LOG_LEVEL_INFO) echo "INFO" ;;
        $LOG_LEVEL_WARNING) echo "WARNING" ;;
        $LOG_LEVEL_ERROR) echo "ERROR" ;;
    esac
}

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export -f logger::init logger::rotate logger::log
export -f logger::debug logger::info logger::warning logger::error
export -f logger::set_level logger::get_level