name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up environment
      run: |
        chmod +x utils/*.sh
        chmod +x src/*.sh

    - name: Verify release readiness
      run: |
        echo "🔍 Verifying release readiness..."
        ./utils/dependency_check.sh
        ./utils/installer.sh --dry-run
        
        # Check if all tests pass
        cd tests
        ./test_stack.sh
        ./test_framework.sh

    - name: Generate documentation
      run: |
        echo "📚 Generating documentation..."
        # Generate updated README with version info
        ./utils/generate_docs.sh
        
        # Validate documentation
        if [ ! -f "docs/README.md" ] || [ ! -f "docs/API_REFERENCE.md" ]; then
          echo "❌ Missing required documentation"
          exit 1
        fi

    - name: Create distribution package
      run: |
        echo "📦 Creating distribution package..."
        mkdir -p dist
        
        # Create source distribution
        tar -czf dist/bash-data-structures-${{ github.ref_name }}.tar.gz \
          --exclude='.git' \
          --exclude='dist' \
          --exclude='.github' \
          .
        
        # Create installation package
        ./utils/installer.sh --package
        
        ls -la dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.tar.gz
          dist/*.sh
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}

    - name: Update version files
      run: |
        echo "🏷️ Updating version information..."
        VERSION="${{ github.ref_name }}"
        
        # Update package.json if exists
        if [ -f "package.json" ]; then
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
        fi
        
        # Create version file
        echo "$VERSION" > VERSION
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add VERSION package.json
        git commit -m "chore: bump version to $VERSION" || echo "No changes to commit"

    - name: Publish to registry (if configured)
      if: contains(github.ref_name, 'rc') == false && contains(github.ref_name, 'beta') == false
      run: |
        echo "🚀 Publishing release..."
        # Placeholder for future registry publishing
        # ./utils/publish.sh

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    if: always()
    
    steps:
    - name: Send notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Release ${{ github.ref_name }} of Bash Data Structures has been ${{ job.status == 'success' && 'published' || 'failed' }}!
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}